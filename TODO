TODO

- change Object to ObjectRef
- create a new Object type to represent a collection of Solids with cached Body

- maybe create a Entity class for entities that can be added to a Space:
    class (Traversable f) => Entity f a | a -> f where
        toObject :: a -> Object f

    instance Entity f (Object f)
    instance Entity [] Solid
    instance Entity [] Shape
    instance (Entity f a) => Entity f [a]

    addToSpace :: (Entity f a) => Space -> a -> ObjectRef f


Space API
    allow user to supply custom Body
    eliminate redundancies
      - position
      - mobility

add `Group` functionality automatically to composite objects
add `Empty` type isomorphic to `Const ()` for representing shapeless objects
add `[Constraint]` parameter to `ObjectRef`
  -- maybe deallocate Constraints when an ObjectRef is removed?

track down all possible segfaults exposed by the Hipmunk library and replace them with exceptions

write properties that verify the lens laws for all lenses in Solid.hs
